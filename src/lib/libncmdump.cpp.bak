#include "libncmdump.h"
#include <filesystem>
#include <lua.hpp>

namespace fs = std::filesystem;

extern "C" {
    API NeteaseCrypt* CreateNeteaseCrypt(const char* path) {
        fs::path fPath = fs::u8path(path);
        return new NeteaseCrypt(fPath.u8string());
    }

    API int Dump(NeteaseCrypt* neteaseCrypt, const char* outputPath) {
        try
        {
            neteaseCrypt->Dump(outputPath);
        }
        catch (const std::invalid_argument& e)
        {
            return 1;
        }
        return 0;
    }

    API void FixMetadata(NeteaseCrypt* neteaseCrypt) {
        neteaseCrypt->FixMetadata();
    }

    API void DestroyNeteaseCrypt(NeteaseCrypt* neteaseCrypt) {
        delete neteaseCrypt;
    }
    
    static int LuaCreateNeteaseCrypt(lua_State* L) {
        const char* path = luaL_checkstring(L, 1); // Get path as string
    if (!path) {
        luaL_error(L, "Expected a string argument for path");
    }

    // Create NeteaseCrypt object and store as userdata
    std::filesystem::path fPath = std::filesystem::u8path(path);
    NeteaseCrypt* crypt = new NeteaseCrypt(fPath.u8string());
    NeteaseCrypt** ud = (NeteaseCrypt**)lua_newuserdata(L, sizeof(NeteaseCrypt*));
    *ud = crypt;

    // Set metatable for NeteaseCrypt
    luaL_getmetatable(L, "NeteaseCrypt");
    if (lua_isnil(L, -1)) {
        lua_pop(L, 1); // Remove nil
        luaL_newmetatable(L, "NeteaseCrypt");

        // Add __gc for cleanup
        lua_pushcfunction(L, [](lua_State* L) -> int {
            NeteaseCrypt** ud = (NeteaseCrypt**)luaL_checkudata(L, 1, "NeteaseCrypt");
            delete *ud;
            return 0;
        });
        lua_setfield(L, -2, "__gc");

        // Add methods to metatable
        lua_pushcfunction(L, [](lua_State* L) -> int {
            NeteaseCrypt** ud = (NeteaseCrypt**)luaL_checkudata(L, 1, "NeteaseCrypt");
            const char* outputPath = luaL_checkstring(L, 2);
            try {
                (*ud)->Dump(outputPath);
                lua_pushinteger(L, 0); // Success
            } catch (const std::invalid_argument& e) {
                lua_pushinteger(L, 1); // Error
            }
            return 1;
        });
        lua_setfield(L, -2, "Dump");

        lua_pushcfunction(L, [](lua_State* L) -> int {
            NeteaseCrypt** ud = (NeteaseCrypt**)luaL_checkudata(L, 1, "NeteaseCrypt");
            (*ud)->FixMetadata();
            return 0; // No return value
        });
        lua_setfield(L, -2, "FixMetadata");
    }
    lua_setmetatable(L, -2);

    return 1; // Return userdata
    }
    static const luaL_Reg mylib_funcs[] = {
        {"CreateNeteaseCrypt", LuaCreateNeteaseCrypt},
        {NULL, NULL}
    };

    int luaopen_ncmdump(lua_State* L) {
        luaL_newlib(L, mylib_funcs);
        return 1;
    }
}